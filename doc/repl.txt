*repl.txt*

                                                                        *REPL*
Author: Alejandro "HiPhish" Sanchez
License: MIT License

Utility for evaluating code in a REPL associated with the current filetype.

                                      Type |gO| to see the table of contents.

==============================================================================
STARTING A REPL                                                    *repl-usage*

:Repl [{type} [{arg} ...]]                                             *:Repl*

Spawns a new REPL. {type} is the REPL type (any |filetype| name). If it is
empty the current filetype is used. E.g. if you are editing a Python file
a Python REPL will be spawned. Works with modifiers like `:vert`.

If {type} is "-" (without quotes) the type will be guessed again. This allows
you to pass arguments to the REPL specifying the type.

Any remaining arguments will be passed to the REPL program. E.g. to spawn
a Python REPL in a vertical split: >
    :Repl python - foo bar <

If you run :Repl again for the same type, the existing REPL window is focused.
To spawn a new instance use bang (!): >
    :Repl!

==============================================================================
MAPPINGS                                                       *repl-mappings*

The following key mappings are available. If no REPL instance is available a
new REPL will be spawned. These mappings will switch the current window to the
REPL. Example of use:
>
    nmap yx       <Plug>(ReplSend)
    nmap yxx      <Plug>(ReplSendLine)
    xmap <Enter>  <Plug>(ReplSend)
<
Note the use `map` instead of `noremap`, because <Plug> is a mapping.

<Plug>(ReplSend){motion}                                    *<Plug>(ReplSend)*
{Visual}<Plug>(ReplSend)
    Send lines to the REPL.

<Plug>(ReplSendLine)                                    *<Plug>(ReplSendLine)*
    Send the current line to the REPL. Special-case if you remapped `_`.

==============================================================================
CONFIGURATION                                                    *repl-config*

All settings are contained in b:repl.
                                                                      *g:repl*
b:repl[{type}]["bin"]
Which binary to execute for the REPL. The default uses the system binary.

b:repl[{type}]["args"]
Which arguments to pass to the executable, these arguments will be passed
before the user-supplied arguments.

b:repl[{type}]["syntax"]
Sets the REPL syntax highlighting. To disable, set to empty.

b:repl[{type}]["title"]
Used to set `b:term_title` in the REPL terminal.

b:repl[{type}]["spawn"]
Optional, defaults to |repl#spawn()|; this function opens a new buffer and
sets up the REPL process. See |repl#spawn()| for details.

This option is intended for special-case REPLs which are not invoked like
a typical shell command.

                                                       *g:repl.type.instances*
Running REPLs are tracked in `g:repl[{type}]["instances"]`. Instances form
a sort of stack with newer ones on top, identified by job ID.

------------------------------------------------------------------------------
b:repl['-']                                                      *b:repl['-']*

Every REPL instance buffer is created with this dictionary. It contains the
information about that particular instance and |g:repl.type.instances| has a
reference to it. Entries: >

   'bin'   : REPL application ("binary") name
   'buffer': Buffer number of the REPL
   'args'  : REPL arguments List; contains default and user ones
   'job_id': Job ID of the REPL process

==============================================================================
DEFINING A REPL                                           *repl-setup*

Users can define new REPL types.
1. Define a dictionary for the new REPL type that specifies all necessary
   information (use the default types for comaprison)
2. Pass it to |repl#define_repl|.

For example, to define a Ruby REPL: >
    let ruby_repl = {
        \ 'bin': 'irb',
        \ 'args': [],
        \ 'syntax': 'ruby',
        \ 'title': 'Ruby REPL',
    \ }

    " Throw an error if there is already a Ruby REPL defined
    call repl#define_repl('ruby', ruby_repl, 'error')
<
This must be sourced after the normal plugin files. |after-directory|

==============================================================================
API                                                                 *repl-api*

------------------------------------------------------------------------------
repl#spawn({mods}, {repl}, {type})                              *repl#spawn()*

Open a new REPL buffer with the given options. This is the default function to
be called when a REPL is instantiated.

 Arguments:~
   {mods}  Modifiers like `:vert`
   {repl}  Dictionary of REPL settings
   {type}  Type of the REPL

 Returns:~
   {Handle} to the REPL buffer

This function is responsible for opening a new buffer, launching the REPL
process and setting it up. It does not depend on state, but the opening of a
new buffer is a side effect. It does not mutate the value of `g:repl`.

------------------------------------------------------------------------------


==============================================================================
 vim:tw=78:ts=4:ft=help:norl:

