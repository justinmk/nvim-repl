*repl.txt*

                                                                        *REPL*
              ____  _____ ____  _                  _~
             |  _ \| ____|  _ \| |      _ ____   _(_)_ __ ___~
             | |_) |  _| | |_) | |     | '_ \ \ / / | '_ ` _ \~
             |  _ <| |___|  __/| |___ _| | | \ V /| | | | | | |~
             |_| \_\_____|_|   |_____(_)_| |_|\_/ |_|_| |_| |_|~

Author: Alejandro "HiPhish" Sanchez
License: MIT License

Utility for evaluating code in a REPL associated with the current filetype.

                                      Type <M-]> to see the table of contents.

==============================================================================
RUNNING A REPL                                                    *repl-usage*

:Repl [{type} [{arg} ...]]                                             *:Repl*

To spawn a new REPL instance run the `:Repl` command. The first argument is
the type of REPL, if it is omitted the type will be guessed based on the
current |'filetype'| according to |repl#guess_type()|. For instance, if you
are editing a Python file a `'python'` REPL will be spawned. You can also use
modifiers like `:vert`.

If a {type} argument is given that type will be used. However, if the {type}
is `'-'` the type will be guessed again. This allows you to pass arguments to
the REPL without having to specify the type.

All the remaining arguments will be passed in the order they are given to the
REPL binary. Putting it all together, to spawn a Python REPL in a vertical
split with arguments you would run
>
    :Repl python - foo bar
<

To terminate a REPL either delete the buffer or terminate the REPL the same
way you would if it was a standalone process.

------------------------------------------------------------------------------
:Repl! [{type} [{arg} ...]]                                           *:Repl!*

If there is already an instance(s) running the cursor is placed in the REPL
window. To spawn a new instance use `:Repl!`.

==============================================================================
MAPPINGS                                                       *repl-mappings*

The following key mappings are available. If no REPL instance is available a
new REPL will be spawned. These mappings will switch the current window to the
REPL. Example of use:
>
    nmap yx       <Plug>(ReplSend)
    nmap yxx      <Plug>(ReplSendLine)
    xmap <Enter>  <Plug>(ReplSend)
<
Note the use `map` instead of `noremap`, because <Plug> is a mapping.

<Plug>(ReplSend){motion}                                    *<Plug>(ReplSend)*
{Visual}<Plug>(ReplSend)
    Send lines to the REPL.

<Plug>(ReplSendLine)                                    *<Plug>(ReplSendLine)*
    Send the current line to the REPL. Special-case if you remapped `_`.

==============================================================================
CONFIGURATION                                                    *repl-config*

All settings are contained in `g:repl['type']`, where `type` is the REPL type.
Each key-value pair is a setting name and value. You can use
|repl#define_repl()| to define a new REPL or override an existing one. The
settings are passed as a dictionary like this: >
    call repl#define_repl('python', {'syntax': ''}, 'force')

Here we turn off syntax highlighting for Python REPL buffers. We `'force'`
this setting in order to override whatever the default setting might be.

                                                                      *g:repl*
g:repl[{type}]["bin"]
Which binary to execute for the REPL. The default uses the system binary.

g:repl[{type}]["args"]
Which arguments to pass to the executable, these arguments will be passed
before the user-supplied arguments.

g:repl[{type}]["syntax"]
Sets the REPL syntax highlighting. To disable, set to empty.

g:repl[{type}]["title"]
Used to set `b:term_title` in the REPL terminal.

g:repl[{type}]["spawn"]
Optional, defaults to |repl#spawn()|; this function opens a new buffer and
sets up the REPL process. See |repl#spawn()| for details.

This option is intended for REPLs which do something special, like not using
the terminal. For most REPLs the default is exactly what you want to use.

                                                    *t:repl* *w:repl* *b:repl*
It is also possible to specify local settings by using one of the scopes `t:`,
`w:` or `b:` as the scope for the `repl` dictionary, with later scopes taking
precedence.
>
    " Turn off syntax highlighting for any REPL from this tab page
    let t:repl = {'python': {'syntax': ''}}
<

                                                       *g:repl.type.instances*
Running REPLs are tracked in `g:repl[{type}]["instances"]`. Instances form
a sort of stack with newer ones on top, identified by job ID.

Note  Do not mutate this list unless you know exactly what you are doing.
      Terminated instances are removed automatically.

------------------------------------------------------------------------------
b:repl['-']                                                      *b:repl['-']*

Every REPL instance buffer is created with this dictionary. It contains the
information about that particular instance and |g:repl.type.instances| has a
reference to it. Entries: >

   'bin'   : REPL application ("binary") name
   'buffer': Buffer number of the REPL
   'args'  : REPL arguments List; contains default and user ones
   'job_id': Job ID of the REPL process

==============================================================================
REPL TYPES                                                        *repl-types*

Some REPL types are defined by default. To change them see |repl-config|.

------------------------------------------------------------------------------
BOURNE SHELL                                                         *repl-sh*
>
    g:repl.sh : {
        'bin': 'sh',
        'args': [],
        'syntax': '',
        'title': 'Bourne Shell',
    }
<
Defaults to `sh`. Note that this is often an alias to `bash`.

------------------------------------------------------------------------------
GNU GUILE                                                         *repl-guile*
>
    g:repl.guile = {
        'bin': 'guile',
        'args': ['-L', '.'],
        'syntax': 'scheme',
        'title': 'Guile REPL',
    }
<
The arguments add the current working directory to the module load path.

------------------------------------------------------------------------------
PYTHON                                                           *repl-python*
>
    g:repl.python = {
        'bin': 'python',
        'args': [],
        'syntax': '',
        'title': 'Python REPL',
    }
<
The shell default Python interpreter is used. This works nicely with virtual
environments where `python` defaults to the binary of the environment.

------------------------------------------------------------------------------
R7RS AND SCHEME                                     *repl-scheme*  *repl-r7rs*

There are two variations of R7RS, called R7RS small and R7RS large
respectively. The large language has not been fully standardised yet, so only
the small one is supported at the moment. The 'r7rs' REPL is an alias for
'r7rs-small'
>
    g:repl.r7rs-small = {
        'bin': 'chibi-scheme',
        'args': ['-I', '.'],
        'syntax': '',
        'title': 'Chibi Scheme',
    }
<
Chibi Scheme is a very small implementation of the R7RS, so this seems to be
a reasonably universal choice. The arguments will add the current working
directory to the front of the load path list.

------------------------------------------------------------------------------
BOURNE SHELL                                                         *repl-sh*
>
    g:repl.sh = {
        'bin': 'sh',
        'args': [],
        'syntax': '',
        'title': 'Bourne Shell',
    }
<
The Bourne shell is basically like executing the |:terminal| command.



==============================================================================
DEFINING NEW REPL TYPES                                           *repl-setup*

Users can define new REPL types.
1. Define a dictionary for the new REPL type that specifies all necessary
   information (use the default types for comaprison)
2. Pass it to |repl#define_repl|.

For example, to define a Ruby REPL: >
    let ruby_repl = {
        \ 'bin': 'irb',
        \ 'args': [],
        \ 'syntax': 'ruby',
        \ 'title': 'Ruby REPL',
    \ }

    " Throw an error if there is already a Ruby REPL defined
    call repl#define_repl('ruby', ruby_repl, 'error')
<
This must be sourced after the normal plugin files. |after-directory|

==============================================================================
API                                                                 *repl-api*

------------------------------------------------------------------------------
repl#guess_type({ft})                                      *repl#guess_type()*

Tries to guess the type of the REPL based on the file type string {ft}.

Arguments:~
  {ft}  File type string according to |filetype|

Returns:~
  A matching REPL type if one was found.

Throws:~
  `'nomatch'`  No matching REPL type was found


For atomic types this means looking up {ft} as the key into `g:repl`. For
compound file types (see |'ft'|) a number of combinations are tried; first
{ft} is split on the dots and all the atomic types are tried from left to
right. Then progressively larger combinations of the atomic types are tried
with the complete {ft} string being last. The last successfully matching
combination is returned.

Example  If {ft} is `'a.b.c'` the following combinations are tried in this
         order: `'a'`, `'b'`, `'c'`, `'a.b'`, `'b.c'`, `'a.b.c'`

As a rule of thumb remember: the more to the right, the more specific the
type, and more complex types take precedence over simpler ones.

------------------------------------------------------------------------------
repl#define_repl({type}, {repl}, {force})                 *repl#define_repl()*

Defines a new REPL or extends and existing one. If the {repl} has not yet be
defined it is added to |g:repl| as a new entry. Otherwise the behaviour
depends on the value of the {force} argument.

Arguments:~
  {type}   The type of the REPL, it will be used as a key into |g:repl|
  {repl}   Dictionary of settings for the new REPL
  {force}  Either 'keep', 'force' or 'error'; this argument tells the function
           what to do if {type} is already in |g:repl|. The behaviour is the
           same as that of the third argument to |extend()|.

Use this function to define a new REPL instead of assigning entries to
|g:repl| manually. A value of 'force' is particularly useful because it allows
overriding existing options:
>
    call repl#define_repl('python', {'bin': 'python3'}, 'force')
<
This will change the binary, but leave other options as they are.


------------------------------------------------------------------------------
repl#spawn({mods}, {repl}, {type})                              *repl#spawn()*

Open a new REPL buffer with the given options. This is the default function to
be called when a REPL is instantiated.

 Arguments:~
   {mods}  Modifiers like `:vert`
   {repl}  Dictionary of REPL settings
   {type}  Type of the REPL

 Returns:~
   {Handle} to the REPL buffer

This function is responsible for opening a new buffer, launching the REPL
process and setting it up. It does not depend on state, but the opening of a
new buffer is a side effect. It does not mutate the value of `g:repl`.

------------------------------------------------------------------------------


==============================================================================
 vim:tw=78:ts=4:ft=help:norl:

